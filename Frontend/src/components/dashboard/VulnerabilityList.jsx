import { SEVERITY_COLORS } from '../../utils/constants';

const VulnerabilityList = ({ vulnerabilities = [] }) => {
  // Group vulnerabilities by category
  const groupedVulns = vulnerabilities.reduce((acc, vuln) => {
    const category = getCategoryFromAlert(vuln.alert || vuln.name);
    if (!acc[category]) acc[category] = [];
    acc[category].push(vuln);
    return acc;
  }, {});

  if (!vulnerabilities.length) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold mb-4">Vulnerabilities</h3>
        <p className="text-gray-500">No vulnerabilities found.</p>
      </div>
    );
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-lg font-semibold mb-4">
        Vulnerabilities ({vulnerabilities.length})
      </h3>

      {/* Summary Section */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-medium mb-2">Quick Summary:</h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {Object.entries(groupedVulns).map(([category, vulns]) => (
            <div key={category} className="text-sm">
              <span className="font-medium">{category}:</span> {vulns.length}
            </div>
          ))}
        </div>
      </div>

      {/* Detailed Vulnerabilities */}
      {Object.entries(groupedVulns).map(([category, vulns]) => (
        <div key={category} className="mb-6">
          <h4 className="text-lg font-medium mb-3">{category}</h4>
          <div className="space-y-4">
            {vulns.map((vuln, index) => (
              <div key={index} className="border-l-4 p-4 bg-gray-50" 
                   style={{ borderColor: getAlertColor(getRiskLevel(vuln.risk)) }}>
                <div className="flex justify-between items-start">
                  <h5 className="font-medium">{vuln.alert || vuln.name}</h5>
                  <span className={`px-2 py-1 rounded text-xs text-white`}
                        style={{ backgroundColor: getAlertColor(getRiskLevel(vuln.risk)) }}>
                    {getRiskLevel(vuln.risk)}
                  </span>
                </div>
                <p className="text-sm text-gray-600 mt-2">{vuln.description}</p>
                {vuln.url && (
                  <div className="mt-2 text-sm">
                    <span className="font-medium">URL: </span>
                    <code className="bg-gray-100 px-2 py-1 rounded">{vuln.url}</code>
                  </div>
                )}
                {vuln.solution && (
                  <div className="mt-2">
                    <span className="text-sm font-medium">Solution: </span>
                    <span className="text-sm text-gray-600">{vuln.solution}</span>
                  </div>
                )}
                {vuln.evidence && (
                  <div className="mt-2">
                    <span className="text-sm font-medium">Evidence: </span>
                    <pre className="text-xs bg-gray-100 p-2 rounded mt-1 overflow-x-auto">
                      {vuln.evidence}
                    </pre>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
};

const getCategoryFromAlert = (alert) => {
  const lowerAlert = alert.toLowerCase();
  if (lowerAlert.includes('sql') || lowerAlert.includes('injection')) return 'SQL Injection';
  if (lowerAlert.includes('xss')) return 'Cross-Site Scripting (XSS)';
  if (lowerAlert.includes('http') || lowerAlert.includes('https')) return 'HTTP Security';
  if (lowerAlert.includes('csrf')) return 'CSRF';
  if (lowerAlert.includes('auth') || lowerAlert.includes('login')) return 'Authentication';
  if (lowerAlert.includes('ssl') || lowerAlert.includes('tls')) return 'SSL/TLS Issues';
  return 'Other Vulnerabilities';
};

const getRiskLevel = (risk) => {
  if (typeof risk === 'number') {
    switch(risk) {
      case 3: return 'HIGH';
      case 2: return 'MEDIUM';
      case 1: return 'LOW';
      default: return 'INFO';
    }
  }
  return risk || 'INFO';
};

const getAlertColor = (severity) => {
  switch(severity) {
    case 'HIGH': return '#dc2626';
    case 'MEDIUM': return '#f59e0b';
    case 'LOW': return '#10b981';
    default: return '#3b82f6';
  }
};

export default VulnerabilityList;
